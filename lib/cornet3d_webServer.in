#!@NODEJS_SHABANG@

// Get configuration add command-line options from program arguments The
// command-line options will override some of the configuration
// parameters.
const config = require('./options.js').parse(require('./configDefaults').
        configDefaults(require('./configure').configure()));


// Debugging spew.
console.log('config=' + JSON.stringify(config) + '\n');

/////////////////////////////////////////////////////////////////
// At this point consider config as fixed parameters:
//
// config - user configuration from configure.js and
//          command-line and environment additions and
//          overrides
//
////////////////////////////////////////////////////////////////


// Get some nodeJS modules.
const
    // local module of utility functions to help this file be smaller
    util = require('./util'),
    // common build-in modules
    path = require('path'),
    process = require('process'),
    fs = require('fs'),
    // express.  At this time is very popular.
    express = require('express'),
    // Web Sockets.  The fast and stripped down WS.
    webSocket = require('ws'),
    // Our express App object
    expressApp = express();


// Configure very simple express services:

// Serve static files from ../public/
expressApp.use(express.static(fs.realpathSync(path.join(
    __dirname, '..', 'public'))));


// This effectively replaces socket.IO without the unneeded
// "Sledgehammers", except that we use .On() and .Emit() since we can't
// use .on() and .emit().
function wsOnConnection(socket, ws) {

    var address = socket._socket.remoteAddress + ':' +
        socket._socket.remotePort;
    var onCallbacks = {};

    console.log('got connection from: ' + address);

    // This receives messages like socket.IO
    socket.on('message', function(message) {

        console.log(address + ' got message:\n   ' + message);

        // We assume that the data is in a json string like so:
        // ev.data =  { name: messageName, args:  [ {}, {}, {}, ... ] }

        var obj = JSON.parse(message);
        var name = obj.name;
        if(name === undefined || obj.args === undefined ||
                !(obj.args instanceof Array)) {
            console.log('Bad WebSocket "on" message from ' +
                    ws.url + '\n  ' + e.data);
            return;
        }
        if(onCallbacks[name] === undefined) {
            console.log('WebSocket on callback "' + name +
                    '" not found for message from ' + ws.url + ':' +
                    '\n  ' + e.data);
            return;
        }
        onCallbacks[name](...obj.args);
    });

    socket.on('close', function() {

        console.log(address + ' closed');
    });

    // Like socket.IO emit()
    socket.Emit = function() {

        var args = [].slice.call(arguments);
        var name = args.shift();
        socket.send(JSON.stringify({ name: name, args: args }));
    };

    // Like socket.IO on()
    socket.On = function(name, func) {

        onCallbacks[name] = func;
    };

    socket.RemoveCallback = function(name) {
        
        delete onCallbacks[name];
    };

    // Let the client know they connected
    socket.Emit('connect', 'hello client');

    socket.On('radiosStatus', function() {

        console.log(address + ' "radiosStatus" request:');
        util.radiosStatus(config, function(radiosStatus) {
            socket.Emit('radiosStatus', radiosStatus);
        });
    });

    // Request to send spectrum data from a radio to
    // this client via cornet3d_spectrumServer.
    socket.On('startSpectrum', function(radio) {

        console.log(address + ' "startSpectrum" request');

        util.connectToSpectrum(radio, socket);
    });

    socket.On('stopSpectrum', function() {

        console.log(address + ' "stopSpectrum" request');

        util.stopSpectrum(socket);
    });

}


// A small http and https createServer() wrapper function
function createServer(httpType, port, optArgs = null) {

    if(httpType === 'http')
        var server = require(httpType).createServer(expressApp);
    else if(httpType === 'https')
        var server = require(httpType).createServer(optArgs, expressApp);
    else
        throw 'bad server type ' + httpType

    server.listen(parseInt(port), config.bindAddress, function() {
        console.log(httpType +
            ' and webWockets server listening on port: ' +
            port);
    });

    var ws = new webSocket.Server({server: server});
    ws.on('connection', function(socket) { wsOnConnection(socket, ws); });
}


// We create two possible servers, one for HTTP and one for HTTPS

if(config.httpPort !== false)
    createServer('http', config.httpPort);


if(config.httpsPort !== false)
    createServer('https', config.httpsPort, {
        key: fs.readFileSync(path.join(__dirname, 'key.pem')),
        cert: fs.readFileSync(path.join(__dirname, 'cert.pem'))
    });
